from flask import Flask, request, jsonify
from flask_cors import CORS
import whisper
from pydub import AudioSegment
import os

app = Flask(__name__)
CORS(app)

# Load Whisper model
model = whisper.load_model("base")  # You can use "base", "small", "medium", "large"

@app.route("/transcribe", methods=["POST"])
def upload_file():
    if "file" not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files["file"]
    if file.filename == "":
        return jsonify({"error": "No file selected"}), 400

    # Save the file temporarily
    temp_path = f"temp/{file.filename}"
    file.save(temp_path)

    # Convert file to WAV format (if needed)
    try:
        audio = AudioSegment.from_file(temp_path)
        wav_path = f"{temp_path}.wav"
        audio.export(wav_path, format="wav")

        # Transcribe the audio using Whisper
        result = model.transcribe(wav_path)
        transcript = result["text"]

        # Highlight numbers in the transcript
        highlighted_transcript = transcript.replace(
            r"\b\d+\b", lambda x: f"<span class='highlight'>{x.group(0)}</span>"
        )

        return jsonify({"transcript": highlighted_transcript})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

    finally:
        # Cleanup temp files
        if os.path.exists(temp_path):
            os.remove(temp_path)
        if os.path.exists(wav_path):
            os.remove(wav_path)

if __name__ == "__main__":
    # Create a temp directory for file uploads
    os.makedirs("temp", exist_ok=True)
    app.run(debug=True)
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        if 'file' not in request.files:
            return jsonify({'message': 'No file part in the request'}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({'message': 'No file selected for upload'}), 400

        # Process the file (Placeholder logic)
        if not file.filename.endswith('.mp3'):
            return jsonify({'message': 'Invalid file type. Only MP3 files are supported.'}), 415

        # Simulate successful processing
        return jsonify({'message': 'File processed successfully'})

    except Exception as e:
        return jsonify({'message': f'An error occurred: {str(e)}'}), 500
