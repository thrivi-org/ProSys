from flask import Flask, request, jsonify
from flask_cors import CORS
from google.cloud import speech
from pydub import AudioSegment
import os
import io

app = Flask(__name__)
CORS(app)

# Configure Google Cloud Speech-to-Text
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "your-google-credentials.json"

def transcribe_audio(file_path):
    """Transcribes audio using Google Cloud Speech-to-Text."""
    client = speech.SpeechClient()
    
    with io.open(file_path, "rb") as audio_file:
        content = audio_file.read()
    
    audio = speech.RecognitionAudio(content=content)
    config = speech.RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
        sample_rate_hertz=16000,
        language_code="en-US"
    )
    
    response = client.recognize(config=config, audio=audio)
    transcript = " ".join([result.alternatives[0].transcript for result in response.results])
    return transcript

@app.route("/transcribe", methods=["POST"])
def upload_file():
    if "file" not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files["file"]
    if file.filename == "":
        return jsonify({"error": "No file selected"}), 400

    # Save the file temporarily
    temp_path = f"temp/{file.filename}"
    file.save(temp_path)

    # Convert file to WAV format (if needed)
    audio = AudioSegment.from_file(temp_path)
    wav_path = f"{temp_path}.wav"
    audio.export(wav_path, format="wav")

    # Transcribe the audio
    try:
        transcript = transcribe_audio(wav_path)
        # Highlight numbers
        highlighted_transcript = transcript.replace(
            r"\b\d+\b", lambda x: f"<span class='highlight'>{x.group(0)}</span>"
        )
        return jsonify({"transcript": highlighted_transcript})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        # Cleanup temp files
        if os.path.exists(temp_path):
            os.remove(temp_path)
        if os.path.exists(wav_path):
            os.remove(wav_path)

if __name__ == "__main__":
    # Create a temp directory for file uploads
    os.makedirs("temp", exist_ok=True)
    app.run(debug=True)
