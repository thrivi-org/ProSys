from flask import Flask, request, render_template, jsonify
from werkzeug.utils import secure_filename
import os
import speech_recognition as sr
import pandas as pd
from collections import defaultdict

app = Flask(__name__)

# Configuration
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'mp3', 'txt', 'csv', 'xlsx'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Helper functions
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def transcribe_audio(file_path):
    recognizer = sr.Recognizer()
    with sr.AudioFile(file_path) as source:
        audio_data = recognizer.record(source)
        try:
            return recognizer.recognize_google(audio_data)
        except sr.UnknownValueError:
            return "Transcription failed."
        except sr.RequestError as e:
            return f"Error with Google API: {e}"

def categorize_data(data):
    categories = defaultdict(list)
    for _, row in data.iterrows():
        category = 'Other'
        subcategory = 'Other'
        
        if 'income' in str(row).lower():
            category = 'Income'
        elif 'expense' in str(row).lower():
            category = 'Expense'
        
        if 'personal' in str(row).lower():
            subcategory = 'Personal'
        elif 'business' in str(row).lower():
            subcategory = 'Business'
        
        categories[(category, subcategory)].append(row.to_dict())

    return categories

# Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400

    file = request.files['file']

    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400

    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)

        if filename.endswith('.mp3'):
            transcription = transcribe_audio(file_path)
            return jsonify({"transcription": transcription})

        elif filename.endswith(('.txt', '.csv', '.xlsx')):
            if filename.endswith('.csv'):
                data = pd.read_csv(file_path)
            elif filename.endswith('.xlsx'):
                data = pd.read_excel(file_path)
            else:
                with open(file_path, 'r') as f:
                    data = pd.DataFrame([{'text': line.strip()} for line in f])

            categorized_data = categorize_data(data)
            return jsonify({"categorized_data": categorized_data})

    return jsonify({"error": "Unsupported file format"}), 400

@app.route('/categorize', methods=['POST'])
def categorize_text():
    data = request.get_json()

    if not data or 'text' not in data:
        return jsonify({"error": "Invalid input"}), 400

    text_data = data['text']
    data_frame = pd.DataFrame([{'text': line} for line in text_data.splitlines()])
    categorized_data = categorize_data(data_frame)

    return jsonify({"categorized_data": categorized_data})

if __name__ == '__main__':
    app.run(debug=True)
