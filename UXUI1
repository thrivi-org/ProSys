from flask import Flask, request, jsonify, send_from_directory
import os
from werkzeug.utils import secure_filename

def mp3_to_text(file_path):
    # Dummy implementation for the purpose of this example
    return "Extracted text from mp3"

def extract_information(text):
    # Dummy implementation for the purpose of this example
    return {"info": "Extracted information"}

def create_pdf(data, output_file):
    # Dummy implementation for the purpose of this example
    with open(output_file, 'w') as f:
        f.write("PDF content with extracted data")

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
RESULT_FOLDER = 'results'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['RESULT_FOLDER'] = RESULT_FOLDER

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        # Process file
        output_file = os.path.join(app.config['RESULT_FOLDER'], filename.replace('.mp3', '.pdf'))
        text = mp3_to_text(filepath)
        extracted_data = extract_information(text)
        create_pdf(extracted_data, output_file)

        return jsonify({'message': 'File processed successfully',
                        'download_url': f'/download/{filename.replace(".mp3", ".pdf")}'})
    return jsonify({'error': 'Unexpected error'}), 500

@app.route('/download/<filename>', methods=['GET'])
def download_file(filename):
    return send_from_directory(app.config['RESULT_FOLDER'], filename, as_attachment=True)

def allowed_file(filename):
    ALLOWED_EXTENSIONS = {'mp3'}
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

if __name__ == '__main__':
    app.run(debug=True)
